/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface FormDto
 */
export interface FormDto {
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof FormDto
     */
    'roleMappings'?: { [key: string]: Array<string>; };
}
/**
 * 
 * @export
 * @interface ProgramDto
 */
export interface ProgramDto {
    /**
     * 
     * @type {string}
     * @memberof ProgramDto
     */
    'name'?: string;
    /**
     * 
     * @type {Array<FormDto>}
     * @memberof ProgramDto
     */
    'forms'?: Array<FormDto>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ProgramDto
     */
    'roleMappings'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ProgramDto
     */
    'securityFunctions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProgramListDto
 */
export interface ProgramListDto {
    /**
     * 
     * @type {Array<ProgramDto>}
     * @memberof ProgramListDto
     */
    'programs'?: Array<ProgramDto>;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RoleListDto
 */
export interface RoleListDto {
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleListDto
     */
    'roles'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface RoleWithProgramsDto
 */
export interface RoleWithProgramsDto {
    /**
     * 
     * @type {string}
     * @memberof RoleWithProgramsDto
     */
    'roleName'?: string;
    /**
     * 
     * @type {Array<ProgramDto>}
     * @memberof RoleWithProgramsDto
     */
    'programs'?: Array<ProgramDto>;
}
/**
 * 
 * @export
 * @interface RoleWithProgramsListDto
 */
export interface RoleWithProgramsListDto {
    /**
     * 
     * @type {Array<RoleWithProgramsDto>}
     * @memberof RoleWithProgramsListDto
     */
    'roles'?: Array<RoleWithProgramsDto>;
}
/**
 * 
 * @export
 * @interface SecurityFunctionList
 */
export interface SecurityFunctionList {
    /**
     * 
     * @type {Array<string>}
     * @memberof SecurityFunctionList
     */
    'securityFunctions'?: Array<string>;
}

/**
 * RoleMappingControllerApi - axios parameter creator
 * @export
 */
export const RoleMappingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hard deletes a program (and all its forms/security functions)
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgram: async (programName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('deleteProgram', 'programName', programName)
            const localVarPath = `/delete-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hard deletes a role (and all its forms/security associations of which)
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteRole', 'roleName', roleName)
            const localVarPath = `/delete-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a program by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProgram', 'id', id)
            const localVarPath = `/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all roles with their associated programs/functions
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDetails: async (roleName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rolesDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all role names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roleNames`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of strings representing the security functions for a program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {string} [formName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityFunctionsForResource: async (programName: string, requestBody: Array<string>, formName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('getSecurityFunctionsForResource', 'programName', programName)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('getSecurityFunctionsForResource', 'requestBody', requestBody)
            const localVarPath = `/permissions-for-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (formName !== undefined) {
                localVarQueryParameter['formName'] = formName;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Maps a role to form within a program with given security functions of that program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapRoleToForm: async (programName: string, formName: string, roleName: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('mapRoleToForm', 'programName', programName)
            // verify required parameter 'formName' is not null or undefined
            assertParamExists('mapRoleToForm', 'formName', formName)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('mapRoleToForm', 'roleName', roleName)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('mapRoleToForm', 'requestBody', requestBody)
            const localVarPath = `/map-role-to-form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (formName !== undefined) {
                localVarQueryParameter['formName'] = formName;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Maps a role to an existing program with given security functions of that program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapRoleToProgram: async (programName: string, roleName: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('mapRoleToProgram', 'programName', programName)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('mapRoleToProgram', 'roleName', roleName)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('mapRoleToProgram', 'requestBody', requestBody)
            const localVarPath = `/map-role-to-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postForm: async (programName: string, formName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('postForm', 'programName', programName)
            // verify required parameter 'formName' is not null or undefined
            assertParamExists('postForm', 'formName', formName)
            const localVarPath = `/add-form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (formName !== undefined) {
                localVarQueryParameter['formName'] = formName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new program
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProgram: async (programName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('postProgram', 'programName', programName)
            const localVarPath = `/add-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new role to the database
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole: async (roleName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('postRole', 'roleName', roleName)
            const localVarPath = `/roles/add-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new security function to an existing program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSecurityFunctions: async (programName: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('postSecurityFunctions', 'programName', programName)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('postSecurityFunctions', 'requestBody', requestBody)
            const localVarPath = `/add-security-functions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForm: async (programName: string, formName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('removeForm', 'programName', programName)
            // verify required parameter 'formName' is not null or undefined
            assertParamExists('removeForm', 'formName', formName)
            const localVarPath = `/remove-form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (formName !== undefined) {
                localVarQueryParameter['formName'] = formName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a role from an existing program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromProgram: async (programName: string, roleName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('removeRoleFromProgram', 'programName', programName)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('removeRoleFromProgram', 'roleName', roleName)
            const localVarPath = `/remove-role-from-program`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a role from an existing form within an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromProgramForm: async (programName: string, formName: string, roleName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('removeRoleFromProgramForm', 'programName', programName)
            // verify required parameter 'formName' is not null or undefined
            assertParamExists('removeRoleFromProgramForm', 'formName', formName)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('removeRoleFromProgramForm', 'roleName', roleName)
            const localVarPath = `/remove-role-from-form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (formName !== undefined) {
                localVarQueryParameter['formName'] = formName;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the security function as well from all usages within program
         * @summary Removes a security function underneath an existing program
         * @param {string} programName 
         * @param {string} securityFunctionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSecurityFunction: async (programName: string, securityFunctionName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'programName' is not null or undefined
            assertParamExists('removeSecurityFunction', 'programName', programName)
            // verify required parameter 'securityFunctionName' is not null or undefined
            assertParamExists('removeSecurityFunction', 'securityFunctionName', securityFunctionName)
            const localVarPath = `/remove-security-function`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programName !== undefined) {
                localVarQueryParameter['programName'] = programName;
            }

            if (securityFunctionName !== undefined) {
                localVarQueryParameter['securityFunctionName'] = securityFunctionName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleMappingControllerApi - functional programming interface
 * @export
 */
export const RoleMappingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleMappingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hard deletes a program (and all its forms/security functions)
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProgram(programName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProgram(programName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.deleteProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hard deletes a role (and all its forms/security associations of which)
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.deleteRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a program by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProgram(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProgram(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.getProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets all programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrograms(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrograms(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.getPrograms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets all roles with their associated programs/functions
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleDetails(roleName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleWithProgramsListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleDetails(roleName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.getRoleDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets all role names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleListDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.getRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a list of strings representing the security functions for a program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {string} [formName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecurityFunctionsForResource(programName: string, requestBody: Array<string>, formName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityFunctionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecurityFunctionsForResource(programName, requestBody, formName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.getSecurityFunctionsForResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Maps a role to form within a program with given security functions of that program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapRoleToForm(programName: string, formName: string, roleName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapRoleToForm(programName, formName, roleName, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.mapRoleToForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Maps a role to an existing program with given security functions of that program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapRoleToProgram(programName: string, roleName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapRoleToProgram(programName, roleName, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.mapRoleToProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Adds a new form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postForm(programName: string, formName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postForm(programName, formName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.postForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a new program
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProgram(programName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProgram(programName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.postProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Adds a new role to the database
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRole(roleName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRole(roleName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.postRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Adds a new security function to an existing program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSecurityFunctions(programName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSecurityFunctions(programName, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.postSecurityFunctions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Removes a form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeForm(programName: string, formName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeForm(programName, formName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.removeForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Removes a role from an existing program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromProgram(programName: string, roleName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromProgram(programName, roleName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.removeRoleFromProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Removes a role from an existing form within an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromProgramForm(programName: string, formName: string, roleName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromProgramForm(programName, formName, roleName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.removeRoleFromProgramForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the security function as well from all usages within program
         * @summary Removes a security function underneath an existing program
         * @param {string} programName 
         * @param {string} securityFunctionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSecurityFunction(programName: string, securityFunctionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSecurityFunction(programName, securityFunctionName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleMappingControllerApi.removeSecurityFunction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoleMappingControllerApi - factory interface
 * @export
 */
export const RoleMappingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleMappingControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Hard deletes a program (and all its forms/security functions)
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgram(programName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProgram(programName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hard deletes a role (and all its forms/security associations of which)
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a program by its ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram(id: number, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.getProgram(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all programs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms(options?: any): AxiosPromise<ProgramListDto> {
            return localVarFp.getPrograms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all roles with their associated programs/functions
         * @param {string} [roleName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDetails(roleName?: string, options?: any): AxiosPromise<RoleWithProgramsListDto> {
            return localVarFp.getRoleDetails(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all role names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: any): AxiosPromise<RoleListDto> {
            return localVarFp.getRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of strings representing the security functions for a program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {string} [formName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityFunctionsForResource(programName: string, requestBody: Array<string>, formName?: string, options?: any): AxiosPromise<SecurityFunctionList> {
            return localVarFp.getSecurityFunctionsForResource(programName, requestBody, formName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Maps a role to form within a program with given security functions of that program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapRoleToForm(programName: string, formName: string, roleName: string, requestBody: Array<string>, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.mapRoleToForm(programName, formName, roleName, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Maps a role to an existing program with given security functions of that program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapRoleToProgram(programName: string, roleName: string, requestBody: Array<string>, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.mapRoleToProgram(programName, roleName, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postForm(programName: string, formName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.postForm(programName, formName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new program
         * @param {string} programName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProgram(programName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.postProgram(programName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new role to the database
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRole(roleName: string, options?: any): AxiosPromise<Role> {
            return localVarFp.postRole(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new security function to an existing program
         * @param {string} programName 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSecurityFunctions(programName: string, requestBody: Array<string>, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.postSecurityFunctions(programName, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a form underneath an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForm(programName: string, formName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.removeForm(programName, formName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a role from an existing program
         * @param {string} programName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromProgram(programName: string, roleName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.removeRoleFromProgram(programName, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a role from an existing form within an existing program
         * @param {string} programName 
         * @param {string} formName 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromProgramForm(programName: string, formName: string, roleName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.removeRoleFromProgramForm(programName, formName, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the security function as well from all usages within program
         * @summary Removes a security function underneath an existing program
         * @param {string} programName 
         * @param {string} securityFunctionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSecurityFunction(programName: string, securityFunctionName: string, options?: any): AxiosPromise<ProgramDto> {
            return localVarFp.removeSecurityFunction(programName, securityFunctionName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleMappingControllerApi - object-oriented interface
 * @export
 * @class RoleMappingControllerApi
 * @extends {BaseAPI}
 */
export class RoleMappingControllerApi extends BaseAPI {
    /**
     * 
     * @summary Hard deletes a program (and all its forms/security functions)
     * @param {string} programName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public deleteProgram(programName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).deleteProgram(programName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hard deletes a role (and all its forms/security associations of which)
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public deleteRole(roleName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).deleteRole(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a program by its ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public getProgram(id: number, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).getProgram(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all programs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public getPrograms(options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).getPrograms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all roles with their associated programs/functions
     * @param {string} [roleName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public getRoleDetails(roleName?: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).getRoleDetails(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all role names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public getRoles(options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).getRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of strings representing the security functions for a program
     * @param {string} programName 
     * @param {Array<string>} requestBody 
     * @param {string} [formName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public getSecurityFunctionsForResource(programName: string, requestBody: Array<string>, formName?: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).getSecurityFunctionsForResource(programName, requestBody, formName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Maps a role to form within a program with given security functions of that program
     * @param {string} programName 
     * @param {string} formName 
     * @param {string} roleName 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public mapRoleToForm(programName: string, formName: string, roleName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).mapRoleToForm(programName, formName, roleName, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Maps a role to an existing program with given security functions of that program
     * @param {string} programName 
     * @param {string} roleName 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public mapRoleToProgram(programName: string, roleName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).mapRoleToProgram(programName, roleName, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new form underneath an existing program
     * @param {string} programName 
     * @param {string} formName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public postForm(programName: string, formName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).postForm(programName, formName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new program
     * @param {string} programName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public postProgram(programName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).postProgram(programName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new role to the database
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public postRole(roleName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).postRole(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new security function to an existing program
     * @param {string} programName 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public postSecurityFunctions(programName: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).postSecurityFunctions(programName, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a form underneath an existing program
     * @param {string} programName 
     * @param {string} formName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public removeForm(programName: string, formName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).removeForm(programName, formName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a role from an existing program
     * @param {string} programName 
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public removeRoleFromProgram(programName: string, roleName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).removeRoleFromProgram(programName, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a role from an existing form within an existing program
     * @param {string} programName 
     * @param {string} formName 
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public removeRoleFromProgramForm(programName: string, formName: string, roleName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).removeRoleFromProgramForm(programName, formName, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the security function as well from all usages within program
     * @summary Removes a security function underneath an existing program
     * @param {string} programName 
     * @param {string} securityFunctionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleMappingControllerApi
     */
    public removeSecurityFunction(programName: string, securityFunctionName: string, options?: RawAxiosRequestConfig) {
        return RoleMappingControllerApiFp(this.configuration).removeSecurityFunction(programName, securityFunctionName, options).then((request) => request(this.axios, this.basePath));
    }
}



